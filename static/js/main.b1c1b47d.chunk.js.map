{"version":3,"sources":["sortingAlgorithms/mergeSort.js","sortingAlgorithms/quickSort.js","sortingAlgorithms/heapSort.js","sortingVisualizer/sortingVisualizer.jsx","sortingAlgorithms/bubbleSort.js","sortingAlgorithms/selectionSort.js","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getQuickSortAnimations","quickSort","low","high","pi","pivot","temp","partition","getHeapSortAnimations","n","heapify","heapSort","largest","l","r","swap","SortingVisualizer","props","state","isRunning","this","resetArray","min","max","random","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","pivotIdx","pivotStyle","bubbleSort","getBubbleSortAnimations","min_idx","selectionSort","getSelectionSortAnimations","id","className","map","value","idx","key","onClick","mergeSort","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b1c1b47d.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n  }\n  \n  function mergeSortHelper(\n    mainArray,\n    startIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n  }\n  \n  function doMerge(\n    mainArray,\n    startIdx,\n    middleIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n    while (i <= middleIdx && j <= endIdx) {\n      animations.push([i, j]);\n      animations.push([i, j]);\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n\n\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k++] = auxiliaryArray[i++];\n      } else {\n\n\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k++] = auxiliaryArray[j++];\n      }\n    }\n    while (i <= middleIdx) {\n      animations.push([i, i]);\n      animations.push([i, i]);\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIdx) {\n      animations.push([j, j]);\n      animations.push([j, j]);\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }","export function getQuickSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    quickSort(array, 0, array.length-1, animations);\n    return animations;\n  }\n\nfunction quickSort(array, low, high, animations) {\n    \n    if (low < high) \n        { \n           \n            let pi = partition(array, low, high, animations); \n\n            quickSort(array, low, pi-1, animations); \n            quickSort(array, pi+1, high, animations); \n        } \n\n\n}\n\nfunction partition(array, low, high, animations) \n    { \n        let pivot = array[high];  \n        let i = (low-1); \n        for (let j=low; j<high; j++) \n        { \n\n            animations.push([0, high, i+1, j]);\n            animations.push([0, high, i+1, j]); \n            if (array[j] < pivot) \n            { \n                i++; \n                animations.push([1, high, i, array[j]]);\n                animations.push([1, high, j, array[i]]);\n\n                let temp = array[i]; \n                array[i] = array[j]; \n                array[j] = temp; \n            } \n        } \n\n        animations.push([1, high, i+1, array[high]]);\n        animations.push([1, high, high, array[i+1]]);\n        let temp = array[i+1]; \n        array[i+1] = array[high]; \n        array[high] = temp; \n  \n        return i+1; \n    } \n","export function getHeapSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    heapSort(array, animations);\n    return animations;\n  }\n\n\n\nfunction heapSort(array, animations) \n    { \n        let n = array.length; \n  \n \n        for (let i = Math.floor(n/2); i >= 0; i--) \n            heapify(array, n, i, animations); \n  \n       \n        for (let i=n-1; i>0; i--) \n        { \n           \n            animations.push([0,0,i]);\n            animations.push([0,0,i]); \n            animations.push([1,0,array[i]]);\n            animations.push([1,i,array[0]]);\n            let temp = array[0]; \n            array[0] = array[i]; \n            array[i] = temp; \n  \n           \n            heapify(array, i, 0, animations); \n        } \n    } \n  \n   \n   \n    function heapify(array, n, i, animations) \n    { \n        let largest = i;\n        let l = 2*i + 1;\n        let r = 2*i + 2;\n  \n       \n        if (l < n) {\n            animations.push([0,l,largest]);\n            animations.push([0,l,largest]);\n            if (array[l] > array[largest]) \n                largest = l; \n        }\n        if (r < n) {\n            animations.push([0,r,largest]);\n            animations.push([0,r,largest]);\n            if (array[r] > array[largest]) \n                largest = r; \n        }\n  \n       \n        \n  \n       \n        if (largest != i) \n        { \n            animations.push([1,i,array[largest]]);\n            animations.push([1,largest,array[i]]);\n            let swap = array[i]; \n            array[i] = array[largest]; \n            array[largest] = swap; \n  \n           \n            heapify(array, n, largest, animations); \n        } \n    } ","import React from 'react';\nimport {getMergeSortAnimations} from '../sortingAlgorithms/mergeSort.js';\nimport {getBubbleSortAnimations} from '../sortingAlgorithms/bubbleSort.js';\nimport {getQuickSortAnimations} from '../sortingAlgorithms/quickSort.js';\nimport {getHeapSortAnimations} from '../sortingAlgorithms/heapSort.js';\nimport {getSelectionSortAnimations} from '../sortingAlgorithms/selectionSort.js';\n\nimport './sortingVisualizer.css';\n\n// Value defines the speed of the animations.\nconst ANIMATION_SPEED_MS = 3;\n\n// Value defines the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 100;\n\n// Value defines the main color of the array bars.\nconst PRIMARY_COLOR = 'brown';\n\n// Value defines color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'yellow';\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n\n    this.state = {\n      array: [],\n      isRunning: false,\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(11, 777));\n    }\n    this.setState({array});\n  }\n  \n  mergeSort() {\n    this.resetArray();\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n\n  quickSort() {\n    this.resetArray();\n    const animations = getQuickSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const pivotIdx = animations[i][1];\n      const pivotStyle = arrayBars[pivotIdx].style;\n      setTimeout(() => {\n        pivotStyle.backgroundColor = 'red';\n      }, i * ANIMATION_SPEED_MS);\n      if (i > 0 && animations[i][1] !== animations[i-1][1]) {\n        const pivotIdx = animations[i-1][1];\n        const pivotStyle = arrayBars[pivotIdx].style;\n        setTimeout(() => {\n          pivotStyle.backgroundColor = PRIMARY_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n      }\n      if (animations[i][0] === 0) {\n        const [x, y, barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 2 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [x, y, barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n      if (i === animations.length - 1) {\n        const pivotIdx = animations[i][1];\n        const pivotStyle = arrayBars[pivotIdx].style;\n        setTimeout(() => {\n          pivotStyle.backgroundColor = PRIMARY_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  heapSort() {\n    this.resetArray();\n    const animations = getHeapSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      if (animations[i][0] === 0) {\n        const [x, barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 2 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [x, barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  bubbleSort() {\n    this.resetArray();\n    const animations = getBubbleSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      if (animations[i][0] === 0) {\n        const [x, barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 2 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [x, barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  selectionSort() {\n    this.resetArray();\n    const animations = getSelectionSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      if (animations[i][0] === 0) {\n        const [x, barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 2 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [x, barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  render() {\n    const {array} = this.state;\n    \n    return (\n      <div>\n        <div id=\"background\">\n      <div className=\"array-container\">\n        {array.map((value, idx) => (\n          <div\n            className=\"array-bar\"\n            key={idx}\n            style={{\n              backgroundColor: PRIMARY_COLOR,\n              height: `${value}px`,\n            }}></div>\n        ))}</div>\n        </div>\n        <div id=\"toolbar-container\">\n        <div\n          className=\"Button\"\n          onClick={() => this.mergeSort()}>\n          Merge Sort\n        </div>\n        <div className=\"separator\"></div>\n        <div\n          className=\"Button\"\n          onClick={() => this.quickSort()}>\n          Quick Sort\n        </div>\n        <div className=\"separator\"></div>\n        <div\n          className=\"Button\"\n          onClick={() => this.heapSort()}>\n          Heap Sort\n        </div>\n        <div className=\"separator\"></div>\n        <div\n          className=\"Button\"\n          onClick={() => this.bubbleSort()}>\n          Bubble Sort\n        </div>\n        <div className=\"separator\"></div>\n        <div\n          className=\"Button\"\n          onClick={() => this.selectionSort()}>\n          Selection Sort\n        </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n\nfunction randomIntFromInterval(min, max) {\n\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n","export function getBubbleSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    bubbleSort(array, animations);\n    return animations;\n  }\n  \nfunction bubbleSort(\n    mainArray,\n    animations\n) {\n    let n = mainArray.length;\n    \n    if (n === 1) return mainArray;\n    for (let i = 0; i < n; i++) {\n        for( let j = 0; j < n-i-1; j++) {\n            animations.push([0, j, j+1]);\n            animations.push([0, j, j+1]);\n            if (mainArray[j] > mainArray[j+1]) {\n                animations.push([1, j, mainArray[j+1]]);\n                animations.push([1, j+1, mainArray[j]]);\n                let temp = mainArray[j];\n                mainArray[j] = mainArray[j+1];\n                mainArray[j+1] = temp;\n            }\n        }\n    }\n    return animations;\n}\n\n","export function getSelectionSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    selectionSort(array, animations); \n    return animations;\n    }\n\n\nfunction selectionSort(mainArray, animations) { \n      let n = mainArray.length; \n\n      for (let i = 0; i < n-1; i++) \n      { \n\n          let min_idx = i; \n          for (let j = i+1; j < n; j++) {\n            animations.push([0, min_idx, j]);\n            animations.push([0, min_idx, j]);\n            if (mainArray[j] < mainArray[min_idx]) \n                min_idx = j; \n          }\n\n          animations.push([1, min_idx, mainArray[i]]);\n          animations.push([1, i, mainArray[min_idx]]);\n          let temp = mainArray[min_idx]; \n          mainArray[min_idx] = mainArray[i]; \n          mainArray[i] = temp; \n      } \n  }","import React from 'react';\nimport SortingVisualizer from './sortingVisualizer/sortingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}